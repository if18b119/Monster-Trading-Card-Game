@startuml

Fight *-- Player
Store *-- Card
DBManagment *-- User
title Monster Card - Class Diagram
Store -- User

 class DBManagment{
    {static} all_user : list<User> 
    {static} CheckLogIn(unique_name : string, pwd : string) : bool
    {static} AddUser(unique_name : string, pwd : string, role : string)
    {static} DeleteUser(unique_name: string)
}

 class  User{
    #name : string
    #pwd : string
    #role : Role

    +GetName(): string
    +GetPwd(): string
    +GetRole(): Role 
    #<<Create>>User()
    
    
}
note left of User: role ->admin, player und die funktionen

class Player extends User  {
  
  -stack : list <Card>
  -deck : list <Card>
  -money : int
  -stats : int
  
  <<Create>>Player(name : string, pwd: string, role: Role)
  +GetMoney() : int
  +AddCardToStack(new_Card : Card): bool
  +DeleteCard(card_Rm : Card): bool
  +Trade():void : bool
  +GetStack() : list <Card>
  +PrintUserInformation(): void
}
note top of Player: trade()=add()+del()

class Admin extends User{
    <<Create>>Admin(name : string, pwd: string, role: Role)
    +AddUser(name : string, pwd: string, role: string) 
    +DeleteUser(unique_name: string)
}
note left of Admin : 1.Type & Role bestimmt die Art des Objekts die erstellt wird
 
enum Role{
    admin
    player
}

class Store{
    -cards_in_store : list <Card>
    {static} addCard(card : Card) : bool
    {static} removeCard(card: Card) : bool
    {static} SellPackage() : bool
    
}

abstract class Card{
   # name : string
   # damage : int
   # id : int
   # type : string
   # elementar_type : string
   
   +getName() : string
   +getDamage() : int
   +getID() : int
   +getType() : string
   +getElementarType() : string
   {abstract}Attack(enemy : Card) : bool
}

class Monster extends Card{
    <<Create>> Monster(name : string, damage : int, id : int, type : string, elementar_type : string) 
    
    
}

note left of Monster : IM attack() wird auch der elemt.type überprüft
class Spell extends Card{
    <<Create>> Spell(name : string, damage : int, id : int, type : string, elementar_type : string) 
   - effective : bool
   - not_effective : bool
   - no_effect : bool
   +CheckEffectivness (enemy Card)

}

class Fight {
    <<Create>> Fight (player1 : Player, player2 : Player)
    -player1 : Player
    -player2 : Player
    +whoStarts(rand : int)
}


enum monster_type{
    Dragon
    Wizzard
    Ork
    Kraken
    Goblin
    FireElv
}

enum elementar_type{
    FIRE
    WATER
    NORMAL
}
enum CardType{
    monster,
    spell
}
note top of Store: trade()=buy()+sell()
@enduml