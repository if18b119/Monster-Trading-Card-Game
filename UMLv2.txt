@startuml

Fight *-- Player
Store *-- Card
DBManagment *-- User
title Monster Card - Class Diagram
Store -- User

 class DBManagment{
    +{static} all_user : list<User> 
    +{static} CheckLogIn(unique_name : string, pwd : string) : bool
    +{static} AddUser(new_user : User) : void
    +{static} DeleteUser(user : User) : void
    +{static} PrintAllUser() : void
}

 class  User{
    #unique_name : string
    #pwd : string
    #role : Role

    +GetName(): string
    +GetPwd(): string
    +GetRole(): Role 
    +SetName() : void
    +SetPwd() : void
    +Set Role() : void

    #<<Create>>User()
    
    
}



class Player extends User  {
  
  -stack : list <Card>
  -deck : list <Card>
  -EDeck : list <Card>
  -Coins: int
  -elo : int
  
  <<Create>>Player(name : string, pwd: string, role: Role)
  +GetCois() : int
  +GetStack() : list <Card>
  +GetDeck() : list <Card>
  +GetElo() : int
  +SellCard(sell_card : Card) : void
  +AquirePackage() : void
  +PrintStack() : void
  +ChoseDeck(index : int) : void
  +GiveCard(enemy : Player, card : Card) : void
  +TakeCard(card : Card) : void
  
}


class Admin extends User{
    <<Create>>Admin(name : string, pwd: string, role: Role)
    +AddUser(name : string, pwd: string, role: string) 
    +DeleteUser(unique_name: string)
}

 
enum Role{
    admin
    player
}

class Store{
    -cards_in_store : list <Card>
    +{static} AddCard(card : Card) : void
    +{static} RemoveCard(card: Card) : void
    +{static} SellPackage() : list<Card>
    +GetCard() : list<Card>
    
}

abstract class Card{
   # name : string
   # damage : int
   # id : int
   # type : string
   # elementar_type : string
   
   +getName() : string
   +getDamage() : int
   +getID() : int
   +getType() : string
   +getElementarType() : string
   {abstract}Attack(enemy : Card) : bool
}

class Monster extends Card{
    -mtype : MonsterType
    <<Create>> Monster(name : string, damage : int, id : int, type : string, elementar_type : string) 
    
    
}


class Spell extends Card{
    <<Create>> Spell(name : string, damage : int, id : int, type : string, elementar_type : string) 
   - effective : bool
   - not_effective : bool
   - no_effect : bool
   +CheckEffectivness (enemy Card)

}

class Fight {
    <<Create>> Fight (player1 : Player, player2 : Player)
    -player1 : Player
    -player2 : Player
    +whoStarts(rand : int)
    +CompareMonsters() : void
    +AfterComparing : Card
}


enum monster_type{
    Dragon
    Wizzard
    Ork
    Kraken
    Goblin
    FireElv
}

enum elementar_type{
    FIRE
    WATER
    NORMAL
}
enum CardType{
    monster,
    spell
}
note top of Store: trade()=buy()+sell()
@enduml